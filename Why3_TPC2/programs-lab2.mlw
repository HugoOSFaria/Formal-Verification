



module SelectionSort
       
  use int.Int
  use ref.Ref
  use array.Array
  use array.IntArraySorted
  use array.ArrayPermut
  use array.ArrayEq



  let select (a: array int) (i: int)
    requires { 0 <= i < length a }
    ensures  { i <= result < length a }
    ensures  { forall k: int. i <= k < length a -> a[result] <= a[k] }
    = let min = ref i in
      for j = i + 1 to length a - 1 do
        invariant { true }
        if a[j] < a[!min] then min := j
      done;
    !min



  let swap (a: array int) (i: int) (j: int) =
    requires { 0 <= i < length a /\ 0 <= j < length a }
    ensures { exchange (old a) a i j }
  let v = a[i] in
    a[i] <- a[j];
    a[j] <- v



  let selection_sort (a: array int) 
    ensures { sorted a }
   = for i = 0 to length a -1 do
      invariant{ sorted_sub a 0 i}
      invariant{ forall k1 k2:int. 0 <= k1 < i <= k2 < length a -> a[k1] <= k2}
      let min = select a i
      in if min <> i then swap a min i
     done
  
  
  
  let selection_sort_2 (a: array int)
    ensures { sorted a }
    ensures { permut_all (old a) a }
   = for i = 0 to length a -1 do
      invariant { sorted_sub a 0 i}
      invariant { permut_all (old a) a }
      (* Garantimos assim que o array está sempre ordenado de 0 a i e que a permutação se mantem *)
      invariant { forall m1 m2: int. 0 <= m1 < i <= m2 < length a -> a[m1] <= a[m2] }
      let min_idx = ref i in
        for j = i + 1 to length a -1 do
        (* Temos sempre que o indice do menor numero é menor que j*)
         invariant { i <= !min_idx < j}
         invariant { forall m: int. i <= m < j -> a[!min_idx] <= a[m] }
         if a[j] < a[!min_idx] then min_idx := j
        done;
      swap a i !min_idx 
     done    

end



module InsertionSort

  use int.Int
  use ref.Ref
  use array.Array
  use array.IntArraySorted
  use array.ArrayPermut
  use array.ArrayEq



  let insertion_sort (a: array int) =
    ensures { sorted a }
    for i = 1 to length a - 1 do
      invariant { true }
      let v = a[i] in
      let j = ref i in
      while !j > 0 && a[!j - 1] > v do
          invariant { true }
          variant { !j }
          a[!j] <- a[!j - 1];
          j := !j - 1
      done;
      a[!j] <- v
    done


  let insertion_sort2 (a: array int) =
    ensures { permut_all (old a) a }
  label L in
    for i = 1 to length a - 1 do
      invariant { permut_all (a at L) a }
  label L1 in
      let v = a[i] in
      let j = ref i in
      while !j > 0 && a[!j - 1] > v do
        invariant { 0 <= !j <= i }
        invariant { permut_all (a at L1) a[!j <- v] }
        variant { !j }
  label L2 in
        a[!j] <- a[!j - 1];
        assert { exchange (a at L2)[!j <- v] a[!j-1 <- v] (!j - 1) !j};
        j := !j - 1
      done;
      a[!j] <- v
  done

    

  let swap (a: array int) (i: int) (j: int) =
    requires { 0 <= i < length a /\ 0 <= j < length a }
    ensures { exchange (old a) a i j }
   let v = a[i] in
    a[i] <- a[j];
    a[j] <- v




(* versão com swap, completa *)   

  let insertion_sort3 (a: array int) =
    ensures { sorted a /\ permut_all (old a) a }
  label L in
    for i = 1 to length a - 1 do
      invariant { true }
      invariant { sorted_sub a 0 i /\ permut_all (old a) a}
      let j = ref i in
      while !j > 0 && a[!j - 1] > a[!j] do
        invariant { 0 <= !j <= i}
        invariant { permut_all (old a) a }
        (*Garantimos que o array é ordenado de 0 a j e de j a i+1*)
        invariant { sorted_sub a 0 !j}
        invariant { sorted_sub a !j (i+1)}
        invariant { forall m1 m2: int. 0 <= m1 < !j /\ !j+1 <= m2 <= i -> a[m1] <= a[m2] }
        variant { !j }
        swap a (!j-1) !j;
        j := !j - 1
      done
    done

end


